import java.util.Scanner; // Used to import the scanner class,

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        String[] BookTitles = new String[100];
        String[] BookDescriptions = new String[100];
        Boolean[] BookAvailability = new Boolean[100];
        int[] BookIDs = new int[100];
        int BookCount = 0;
        /* Several arrays are created, defining them as "Strings" due to their type being group of characters, and "BookAvailability" as a Boolean, since the book is
        available or not. Maximum amount of the library is 100, so we stated that as well, and started the count from 0.*/
        while (true) {
            System.out.println("1. Add a book\n2. Search for a book\n3. Issue a book\n4. Return a book\n5. Delete a book\n6. Edit Book Details\n7. View all books\n8. Exit");
            // Using \n to sum up all the menu in one print function. And we set While to true and used it in the first place, as to keep on showing the menu.
            int option = input.nextInt();
            input.nextLine(); // Obviously, defining the option as an integer and expecting the user to choose an option from the menu.

            switch (option) { // Using switch easier than nested ifs, for when a user chooses an option, it'll direct him to their respective cases.
                case 1:
                    BookCount = AddBook(input, BookTitles, BookDescriptions, BookAvailability, BookCount, BookIDs); break;
                case 2:
                    searchForBook(input, BookTitles, BookCount, BookIDs); break;
                case 3:
                    issueBook(input, BookTitles, BookAvailability, BookCount, BookIDs); break;
                case 4:
                    returnBook(input, BookTitles, BookAvailability, BookCount, BookIDs); break;
                case 5:
                    BookCount = deleteBook(input, BookTitles, BookDescriptions, BookAvailability, BookCount, BookIDs); break;
                case 6:
                    editBook(input, BookTitles, BookDescriptions, BookCount); break;
                case 7:
                    viewBooks(BookTitles, BookDescriptions, BookAvailability, BookCount, BookIDs); break;
                case 8:
                    System.out.println("You're proceeding to exit the menu.");
                    return;
                default:
                    System.out.println("You've entered an invalid number. Please try again.");
                    /* In case 1 & 5, we start by "bookcount" as deleting or adding a book will affect the count of books in the library, and in all cases, we mention
                    the arrays in the brackets and end up using break to avoid mixing all cases.*/
            }
        }
    }

    public static int AddBook(Scanner input, String[] titles, String[] descriptions, Boolean[] availability, int count, int[] ids) {
        if (count >= titles.length) { // Length of the books which is 100.
            System.out.println("Library is full. Cannot add more books."); // If number equal or exceeds 100, we won't be able to add more books.
            return count;
        }
        ids[count] = count + 1;
        System.out.println("Assigned Book ID: " + ids[count]); // When a book is added, an ID will be automatically assigned to the book.
        /* Since we'll use various methods, we'll need to make a new class other than the main one, followed by all types of arrays we'll use for each function of its
        respective array */
        System.out.print("Enter book title: ");
        titles[count] = input.nextLine();

        System.out.print("Enter book description: ");
        descriptions[count] = input.nextLine();

        availability[count] = true; // Obviously it's true cause he's adding a book not borrowing.
        System.out.println("Book added successfully.");
        // We're storing the inputs from the user into their respective arrays.
        return count + 1; // Increasing the amount of books in the library, after a book is added.
    }

    public static void searchForBook(Scanner input, String[] titles, int count, int[] ids) {
        System.out.print("Would you like to search by:\n1.Book ID\n2.Book Title");
        int Searchoption = input.nextInt();
        input.nextLine();
        switch (Searchoption) {
            case 1: // Option 1 for the user, that allows him to enter the book's ID to search with.
                System.out.print("Enter book ID to search: ");
                int idsearch = input.nextInt();


                for (int i = 0; i < count; i++) {
                    if (ids[i] == idsearch) {
                        System.out.println("Book found:");
                        System.out.println("ID: " + ids[i]);
                        System.out.println("Title: " + titles[i]);
                        return; // If it's found, it'll print the book's details for him.
                    }
                }
                System.out.println("Book not found.");
                break;


            case 2: // Option to search by title.
                System.out.print("Enter book title to search: "); // Obviously by title, option 2.
                String TitleSearch = input.nextLine();

                for (int i = 0; i < count; i++) {
                    if (titles[i] != null && titles[i].equalsIgnoreCase(TitleSearch)) { // Option to search with title, ignoring being case-sensitive.
                        System.out.println("Book found:");
                        System.out.println("ID: " + ids[i]);
                        System.out.println("Title: " + titles[i]);
                        return;
                    }
                }
                System.out.println("Book not found.");
                break;

            default:
                System.out.println("Invalid option. Please try again."); // In case there's no book that holds the same title.
        }
    }


    public static void issueBook(Scanner input, String[] titles, Boolean[] availability, int count, int[] ids) { // Calling arrays that will be used.
        System.out.print("Enter book ID to issue: "); // Asking the user for an input
        int issuebook = input.nextInt();

        for (int i = 0; i < count; i++) {
            if (ids[i] == issuebook) {
                if (availability[i]) {
                    availability[i] = false;
                    System.out.println("Book issued successfully.");
                } else {
                    System.out.println("Book is already issued.");
                }
                return;
            } /* First it checks if the ID is within the correct range that the library beholds its books, if correct, there are cases, either it'll be issued if it's
             available, or there's a possibility that it's already issued so it won't be available. */
        }

        System.out.println("Book not found.");
    }

    public static void returnBook(Scanner input, String[] titles, Boolean[] availability, int count, int[] ids) {
        System.out.print("Enter book ID to return: ");
        int returnbook = input.nextInt();

        for (int i = 0; i < count; i++) {
            if (ids[i] == returnbook) {
                if (!availability[i]) {
                    availability[i] = true;
                    System.out.println("Book returned successfully.");
                } else {
                    System.out.println("Book was not issued.");
                }
                return;
            } /* Same as each case, checking the availability of the book, if it's not within the book count in the library, then it's "true' as not currently available.
             so it'll be returned successfully. */
        }

        System.out.println("Book not found.");
    }

    public static int deleteBook(Scanner input, String[] titles, String[] descriptions, Boolean[] availability, int count, int[] ids) {
        System.out.print("Enter book ID to delete: ");
        int deletebook = input.nextInt();

        for (int i = 0; i < count; i++) {
            if (ids[i] == deletebook) {
                for (int j = i; j < count - 1; j++) {
                    titles[j] = titles[j + 1];
                    descriptions[j] = descriptions[j + 1];
                    availability[j] = availability[j + 1];
                    ids[j] = ids[j + 1];
                }

                titles[count - 1] = null;
                descriptions[count - 1] = null;
                availability[count - 1] = null;
                ids[count - 1] = 0;
                count--;

                System.out.println("Book deleted successfully.");
                return count; // Updated count after it's removed.
            } /* Checking if the book is available, and if it is, we'll delete it successfully from the arrays such as descriptions, titles, and make availability false.
            Also, we'll reduce the count number by 1. */
        }

        System.out.println("Book not found.");
        return count;
    }

    public static void editBook(Scanner input, String[] titles, String[] descriptions, int count) {
        System.out.print("Enter book title to edit: ");
        String query = input.nextLine();

        for (int i = 0; i < count; i++) {
            if (titles[i] != null && titles[i].equalsIgnoreCase(query)) {
                System.out.print("Enter new title: ");
                titles[i] = input.nextLine();

                System.out.print("Enter new description: ");
                descriptions[i] = input.nextLine();

                System.out.println("Book details updated successfully.");
                return;
                // Also, by ignoring cases, user will enter the book title, if it's available within the count, he'll be able to UPDATE both its title and description.
            }
        }

        System.out.println("Book not found.");
    }

    public static void viewBooks(String[] titles, String[] descriptions, Boolean[] availability, int count, int[] ids) {
        if (count == 0) {
            System.out.println("No books in the library.");
            return;
        }

        System.out.println("\nLibrary Books:");
        for (int i = 0; i < count; i++) {
            System.out.println("ID: " + ids[i]);
            System.out.println("Title: " + titles[i]);
            System.out.println("Description: " + descriptions[i]);
            System.out.println("Availability: " + (availability[i] ? "Available" : "Issued"));
            System.out.println();
             /* If the count is the same as assigned to the first time above, which means there were no books added, or the count returned to 0 after returning & deleting.
        It will display that there are no books in the meantime. Otherwise, it'll state all the books within the library.*/
        }
    }
}
