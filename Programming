import java.util.Scanner; // Importing the java scanner class to allow the user to enter his inputs.

public class Main{
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in); // Allowing to read user inputs by creating a scanner object called "Scanner".

        System.out.print("Enter the number of books you own: ");
        int booksno = input.nextInt(); // Clarifying the user's input for number of boxes as an integer, which will be used as a limit for the arrays as well.
        // Consume the newline character.
        input.nextLine();

        String[] BookTitles = new String[booksno];
        String[] BookDescriptions = new String[booksno];
        boolean[] BookAvailability = new boolean[booksno];
        int[] BookIDs = new int[booksno];
        /* In these four lines, we created the arrays, and stored the first two in "String" type due to being texts, and book availability to be boolean, as the book
         * is either available, or not found, there isn't any other option. And obviously bookids as an integer. In the brackets, we stated the limit of the arrays to
         * "booksno" which is the number of boxes that the user will insert, as it'll be the maximum amount of books that can be stored. */

        int BookCount = 0; // Starting the count from 0.

        while (true) { // While loop will be "true" as we want it to be displayed continuously.
            System.out.println("1. Add a book\n2. Search for a book\n3. Issue a book\n4. Return a book\n5. Delete a book\n6. Edit Book Details\n7. View all books\n8. Exit");
            int option = input.nextInt(); // User will insert his option here to be directed onto the switch case accordingly.
            input.nextLine();

            switch (option) { // Switch cases for each different option, leading to different functions and etc.
                case 1: // Adding a book to the library.
                    if (BookCount >= booksno) { // If the library is full, and the book count is equal to the no. of boxes user inserted, it won't be able to add.
                        System.out.println("Library is full. Cannot add more books.");
                        break;
                    }

                    BookIDs[BookCount] = BookCount + 1; // Assign the ID according to the count, which is initially 0, then + 1.
                    System.out.println("Assigned Book ID: " + BookIDs[BookCount]);

                    String title, description; /* Declaring two new strings, titles and description, to be able to prevent the user from entering any invalid input.
                    Later on, we store it in the arrays.*/

                    // Loop until a valid title is entered.
                    do {
                        System.out.print("Enter book title: ");
                        title = input.nextLine().trim(); // Trim is used to prevent any invalid input like spaces to be considered.
                        if (title.isEmpty()) { // If spaces only as an input detected, it'll print out the following message. 
                            System.out.println("Title cannot be empty or just spaces. Please enter a valid title.");
                        }
                    } while (title.isEmpty()); // Then it'll repeat the process of allowing the user to re-insert his title.
                    BookTitles[BookCount] = title; // If valid, it'lll be stored.

                    // Loop until a valid description is entered.
                    do {
                        System.out.print("Enter book description : ");
                        description = input.nextLine().trim(); // Trim is used to prevent any invalid input like spaces to be considered.
                        if (description.isEmpty()) {
                            System.out.println("Description cannot be empty or just spaces. Please enter a valid description.");
                        }
                    } while (description.isEmpty());
                    BookDescriptions[BookCount] = description; // Same process as above. 

                    BookAvailability[BookCount] = true; // Changes the boolean status to true, as it's available for later usuage.
                    System.out.println("Book added successfully.");

                    BookCount++; // Books' count is increased after successfully being added.
                    break;


                case 2: // Giving the user the freedom to either search by the book's id or by its title, according to the input he will insert, 1/2.
                    System.out.println("Search by:\n1. Book ID\n2. Book Title");
                    int searchOption = input.nextInt();
                    input.nextLine();

                    if (searchOption == 1) {
                        System.out.print("Enter book ID to search: ");
                        int SearchID = input.nextInt();

                        boolean found = false;
                        for (int i = 0; i < BookCount; i++) { // Obviously, the ID the user will search by must be under the number of bookcount.
                            if (BookIDs[i] == SearchID) { // If ID inserted matched with a book, the program will print the following information.
                                System.out.println("Book found:");
                                System.out.println("ID: " + BookIDs[i]);
                                System.out.println("Title: " + BookTitles[i]);
                                System.out.println("Description: " + BookDescriptions[i]);
                                if (BookAvailability[i]) { // Either it's available or issued to someone atm.
                                    System.out.println("Availability: Available");
                                } else {
                                    System.out.println("Availability: Issued");
                                }
                                found = true;
                                break;
                            }
                        } // The boolean is found to question its availability, either it's available or not, and will act upon this decision.

                        if (!found) { // "!found" -> NOT EQUAL FOUND aka not found.
                            System.out.println("Book not found.");
                        }
                    } else if (searchOption == 2) {
                        System.out.print("Enter book title to search: ");
                        String Searchtitle = input.nextLine();

                        boolean found = false;
                        for (int i = 0; i < BookCount; i++) { // As above, will be found if less than the book count and available.
                            if (BookTitles[i] != null && BookTitles[i].equalsIgnoreCase(Searchtitle)) { // Ignoring case differences since java is case-sensitive.
                                System.out.println("Book found:");
                                System.out.println("ID: " + BookIDs[i]);
                                System.out.println("Title: " + BookTitles[i]);
                                System.out.println("Description: " + BookDescriptions[i]);
                                if (BookAvailability[i]) { // Either it's available or issued to someone atm.
                                    System.out.println("Availability: Available");
                                } else {
                                    System.out.println("Availability: Issued");
                                }                                found = true; // Assiging the boolean to a new status, TRUE.
                                break;
                            }
                        }

                        if (!found) {
                            System.out.println("Book not found.");
                        }
                    } else {
                        System.out.println("Invalid option. Please try again.");
                    }
                    break;

                case 3: // Issuing a book.
                    System.out.print("Enter book ID to issue: ");
                    int BookIssueID = input.nextInt();
                    input.nextLine();
                    boolean issued = false; // False until conditions meet, then changed to true.
                    for (int i = 0; i < BookCount; i++) {
                        if (BookIDs[i] == BookIssueID) {
                            if (BookAvailability[i]) {
                                BookAvailability[i] = false;
                                System.out.println("Book issued successfully.");
                            } else {
                                System.out.println("Book is already issued.");
                            }
                            issued = true;
                            break; // Assuring if the book is found in library or not, and then checking if it's already issued or available for lending.
                        }
                    }

                    if (!issued) {
                        System.out.println("Book not found.");
                    }
                    break;

                case 4: // Returning a book.
                    System.out.print("Enter book ID to return: ");
                    int ReturnBookID = input.nextInt();

                    boolean returned = false;
                    for (int i = 0; i < BookCount; i++) {
                        if (BookIDs[i] == ReturnBookID) {
                            if (!BookAvailability[i]) {
                                BookAvailability[i] = true;
                                System.out.println("Book returned successfully.");
                            } else {
                                System.out.println("Book was not issued.");
                            }
                            returned = true;
                            break; // Being repetitive, same as the case above, but quite opposite. If it's not available it'll be able to be returned, logic.
                        }
                    }

                    if (!returned) {
                        System.out.println("Book not found.");
                    }
                    break;

                case 5: // Deleting an existing book
                    System.out.print("Enter book ID to delete: ");
                    int DeleteBookID = input.nextInt();

                    boolean deleted = false; // False cause book is yet to be deleted.
                    for (int i = 0; i < BookCount; i++) {
                        if (BookIDs[i] == DeleteBookID) { // Assuring the book exists and ID matches within the storage.
                            for (int j = i; j < BookCount - 1; j++) {
                                BookTitles[j] = BookTitles[j + 1];
                                BookDescriptions[j] = BookDescriptions[j + 1];
                                BookAvailability[j] = BookAvailability[j + 1];
                                BookIDs[j] = BookIDs[j + 1];
                            } /* Since the books are stored in arrays, there isn't a direct method to remove a book from the middle, so when a book is deleted or removed,
                            we re-arrange the books, to clear the space left by the deleted one.*/

                            BookTitles[BookCount - 1] = null;
                            BookDescriptions[BookCount - 1] = null;
                            BookAvailability[BookCount - 1] = false;
                            BookIDs[BookCount - 1] = 0;
                            BookCount--; // Clearing up all the slots in the array, resetting it.

                            System.out.println("Book deleted successfully.");
                            deleted = true;
                            break;
                        }
                    }

                    if (!deleted) {
                        System.out.println("Book not found.");
                    }
                    break;

                case 6: // Editing book details.
                    System.out.print("Enter book title to edit: ");
                    String Editbook = input.nextLine();

                    boolean edited = false;
                    for (int i = 0; i < BookCount; i++) {
                        if (BookTitles[i] != null && BookTitles[i].equalsIgnoreCase(Editbook)) {
                            System.out.print("Enter new title: ");
                            BookTitles[i] = input.nextLine();

                            System.out.print("Enter new description: ");
                            BookDescriptions[i] = input.nextLine();

                            System.out.println("Book details updated successfully.");
                            edited = true;
                            break;
                        } /* Matching the book inserted by the user with the book within the storage, if there's a book with the same name, ignoring cases,
                         it will be changed successfully. */

                    }

                    if (!edited) { // If NOT found "!" -> Not Equal
                        System.out.println("Book not found.");
                    }
                    break;

                case 7: // View all books
                    if (BookCount == 0) {
                        System.out.println("No books in the library.");
                    } else {
                        System.out.println("\nLibrary Books:");
                        for (int i = 0; i < BookCount; i++) {
                            System.out.println("ID: " + BookIDs[i]);
                            System.out.println("Title: " + BookTitles[i]);
                            System.out.println("Description: " + BookDescriptions[i]);
                            if (BookAvailability[i]) { // Either it's available or issued to someone atm.
                                System.out.println("Availability: Available");
                            } else {
                                System.out.println("Availability: Issued");
                            }
                            System.out.println();
                        } /* If the book count is 0 as it is, there'll be no books to view. But as long as it's more than 0 and less than the limit in the storage,
                        it'll print the books' details.*/
                    }
                    break;

                case 8: // Exit
                    System.out.println("You're proceeding to exit the menu.");
                    return;

                default:
                    System.out.println("You've entered an invalid number. Please try again.");
            }
        }
    }
}
